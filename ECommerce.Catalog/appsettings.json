{
  "HealthChecksUI": {
    "HealthChecks": [
      {
        "Name": "HealthCheck Ecommerce Catalog",
        "Uri": "http://localhost:20000/hc"
      }
    ],
    "EvaluationTimeInSeconds": 5,
    "MinimumSecondsBetweenFailureNotifications": 60//,
    //"HealthCheckDatabaseConnectionString": "Data Source=Healthchecks\\db"
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\MSSQLLocalDB;Database=ECommerceDb;Trusted_Connection=True;MultipleActiveResultSets=true"
  },
  "Logging": {
    //"IncludeScopes": false,
    "LogLevel": {
      "Default": "Information",
      "System": "Error",
      "Microsoft": "Error"
    }
  },
  // PAPERTRAIL Gestor de Logs, https://papertrailapp.com/
  // Instalamos => Microsoft.Extensions.Logging
  "Papertrail": {
    "host": "logs.papertrailapp.com",
    "port": 49399
  }
}


// --- MediatR se instala y se usa momo mediador en las clases Handler
// y de esa forma hacer uso del patron CQRS donde se separan las 
// acciones de consultas de datos de las de inserción update y eliminación ---

// --- AddHealthChecks(), nos muestra el estado actual de nuestro servicio ---
//    builder.Services.AddHealthChecks() 
//        .AddDbContextCheck<PollDbContext>() //nuget: Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore
//        .AddApplicationInsightsPublisher(); //nuget: AspNetCore.HealthChecks.Publisher.ApplicationInsights

//    builder.Services.AddHealthChecksUI() //nuget: AspNetCore.HealthChecks.UI
//        .AddInMemoryStorage(); //nuget: AspNetCore.HealthChecks.UI.InMemory.Storage